<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(USERS,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(RAMPUP, 30)}</stringProp>
        <longProp name="ThreadGroup.start_time">1515063650000</longProp>
        <longProp name="ThreadGroup.end_time">1515063650000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(DURATION, 60)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </LoopController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler failed" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">false</boolProp>
          <stringProp name="RESPONSE_CODE">500</stringProp>
          <stringProp name="RESPONSE_MESSAGE">Service unavailable</stringProp>
          <stringProp name="REQUEST_DATA">{
    &quot;code&quot;: &quot;1234567&quot;
}</stringProp>
          <stringProp name="RESPONSE_DATA">&lt;div class=&quot;errorbox&quot;&gt;
   &lt;h2&gt;Login error:&lt;/h2&gt;
   Incorrect password or confirmation code entered. Please try again.
 &lt;/div&gt;</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1867169789">success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="true">
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">String response_message = &quot;&quot;;
String assertion_message = &quot;&quot;;
//set response message and send it to influxdb
//write detailed error responses to jmeter log
if(!sampleResult.isSuccessful()) {
	assertions = sampleResult.getAssertionResults();
	if(assertions.length&gt;0){
		for(int i=0; i&lt;assertions.length; i++){
			assertion_message = &quot;Failed assertion #&quot; + String.valueOf(i+1) + &quot; message: \&quot;&quot; + assertions[i].getFailureMessage()+&quot;\&quot; | &quot;;
			log.info(&quot;Failed assertion #&quot; + String.valueOf(i+1) + &quot;\n message: \&quot;&quot; + assertions[i].getFailureMessage()+&quot;\n&quot;);
			response_message=response_message+assertion_message;
		}
		sampleResult.setResponseMessage(&quot;Sample failed; Response message is: &quot;+sampleResult.getResponseMessage()+&quot; | &quot;+response_message);
	} else{
		response_message=&quot;Sample failed; Response message is: &quot;+sampleResult.getResponseMessage();
		sampleResult.setResponseMessage(response_message);
	}
	print(&quot;&lt;=========================================================================================================&gt;\n&quot;+
	sampleResult.toString()+&quot; FAILED REQUEST DETAILS\n&quot;+
	&quot;&lt;=========================================================================================================&gt;\n&quot;+
	&quot;ASSERTION RESULTS\n&quot; +
	&quot;&lt;=========================================================================================================&gt;\n&quot;+
	&quot;Failed assertions: &quot;+assertions.length+&quot;\n&quot;+
	&quot;&lt;=========================================================================================================&gt;\n&quot;+
	&quot;RESPONSE DATA\n&quot; +
	&quot;&lt;=========================================================================================================&gt;\n&quot;+
	&quot;Response message:\n&quot; +
	sampleResult.getResponseMessage()+&quot;\n\n&quot;+
	&quot;Response data:\n&quot;+
	sampleResult.getResponseDataAsString()+&quot;\n&quot;+
	&quot;&lt;=========================================================================================================&gt;\n&quot;+
	&quot;REQUEST DATA\n&quot;+
	&quot;&lt;=========================================================================================================&gt;\n&quot;+
	&quot;URL\n&quot;+
	sampleResult.getUrlAsString()+&quot;\n&quot;+
	&quot;Request headers\n&quot;+
	sampleResult.getRequestHeaders()+&quot;\n&quot;+
	&quot;Sampler data\n&quot;+
	sampleResult.getSamplerData()+&quot;\n&quot;+
	&quot;&lt;=========================================================================================================&gt;\n&quot;+
	&quot;&lt;=========================================================================================================&gt;\n\n\n&quot;);
}
</stringProp>
        <stringProp name="scriptLanguage">groovy</stringProp>
      </JSR223Listener>
      <hashTree/>
      <kg.apc.jmeter.reporters.ConsoleStatusLogger guiclass="kg.apc.jmeter.reporters.ConsoleStatusLoggerGui" testclass="kg.apc.jmeter.reporters.ConsoleStatusLogger" testname="jp@gc - Console Status Logger" enabled="true"/>
      <hashTree/>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="influxdbMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">http://localhost:8653/write?db=jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">${__P(SCENARIO_NAME, scenario is not specified)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="measurement" elementType="Argument">
              <stringProp name="Argument.name">measurement</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex</stringProp>
              <stringProp name="Argument.value">.*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">90;95;99</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testTitle" elementType="Argument">
              <stringProp name="Argument.name">testTitle</stringProp>
              <stringProp name="Argument.value">Jenkins build #${__P(BUILD_NUMBER, N/A)} ${__P(BUILD_URL, build url N/A)} with ${__P(SCENARIO_NAME, N/A)} with ${__P(USERS, N/A)} users, ${__P(RAMPUP, N/A)} sec rampup and ${__P(DURATION, N/A)} sec duration was</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventTags" elementType="Argument">
              <stringProp name="Argument.name">eventTags</stringProp>
              <stringProp name="Argument.value">scenario ${__P(SCENARIO_NAME, N/A)},${__P(USERS, N/A)} users, ${__P(RAMPUP, N/A)} sec rampup, ${__P(DURATION, N/A)} sec duration,Jenkins build #${__P(BUILD_NUMBER, N/A)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
      </BackendListener>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
