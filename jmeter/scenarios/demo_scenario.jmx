<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(USERS, 60)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(RAMPUP, 60)}</stringProp>
        <longProp name="ThreadGroup.start_time">1515063650000</longProp>
        <longProp name="ThreadGroup.end_time">1515063650000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(DURATION, 60)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler failed" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">500</stringProp>
            <stringProp name="RESPONSE_MESSAGE">Service unavailable</stringProp>
            <stringProp name="REQUEST_DATA">{
    &quot;code&quot;: &quot;1234567&quot;
}</stringProp>
            <stringProp name="RESPONSE_DATA">&lt;div class=&quot;errorbox&quot;&gt;
   &lt;h2&gt;Login error:&lt;/h2&gt;
   Incorrect password or confirmation code entered. Please try again.
 &lt;/div&gt;</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">false</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler failed" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">500</stringProp>
          <stringProp name="RESPONSE_MESSAGE">Service unavailable</stringProp>
          <stringProp name="REQUEST_DATA">{
    &quot;code&quot;: &quot;1234567&quot;
}</stringProp>
          <stringProp name="RESPONSE_DATA">&lt;div class=&quot;errorbox&quot;&gt;
   &lt;h2&gt;Login error:&lt;/h2&gt;
   Incorrect password or confirmation code entered. Please try again.
 &lt;/div&gt;</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1867169789">success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="true">
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">import org.apache.jmeter.samplers.SampleResult;
import org.apache.jmeter.assertions.AssertionResult;

/*
set response message and send it to influxdb
write detailed error responses to jmeter log
*/ 

def transactionController = sampler.getThreadContext().getPreviousResult().getParent();

/*
 Check if previous failed sampler has parent and parent does not have sampler data. That means that parent is transaction controller.
*/
if(!sampleResult.isSuccessful()){
 if(transactionController &amp;&amp; !transactionController.getSamplerData()){
  handleParentTransactionController(transactionController);
 }else if(sampleResult.getSamplerData()){
  handleSampler(transactionController);
 } 
}

/*
 Change responseMessage for all sub samplers of Transaction controller and set them to Transaction controller response message
 Post all sub samplers trace to log
*/
def handleParentTransactionController(SampleResult transactionSampleResult) {
 def transactionResponseMessage = &quot;\r&quot;+transactionSampleResult.getResponseMessage()+&quot;\r&quot;;
 def subResults = transactionSampleResult.getSubResults();
 def assertions;
 if(subResults){
  for (int i=0; i&lt;subResults.length; i++){
   if(!subResults[i].isSuccessful()){
    assertions = subResults[i].getAssertionResults();
    updateSampleResponseMessage(subResults[i], assertions.length);
    transactionResponseMessage = transactionResponseMessage+subResults[i].getSampleLabel()+&quot;; &quot;+subResults[i].getResponseMessage()+&quot;\r&quot;;
    postTraceToLog(subResults[i], assertions);
   }
  }
  transactionSampleResult.setResponseMessage(transactionResponseMessage);
 }
}

/*
 Change responseMessage for sampler and post trace to log
*/
def handleSampler(SampleResult transactionSampleResult) {
 def assertions = sampleResult.getAssertionResults();
  updateSampleResponseMessage(sampleResult, assertions.length);
  postTraceToLog(sampleResult, assertions);
}

def updateSampleResponseMessage(SampleResult sampleResult, int numberOfFailedAssertions) {
 def responseMessage = sampleResult.getResponseMessage();
 sampleResult.setResponseMessage(&quot;Response message: &quot;+sampleResult.getResponseMessage()+&quot;; Status code: &quot;+sampleResult.getResponseCode()+&quot;; Number of failed assertions: &quot;+numberOfFailedAssertions+&quot;&quot;);
}

def generateResponseTrace(SampleResult sample) {
 def sampleResult = sample;
 def responseLogMessage = &quot;\n\n&quot;+
  &quot;Sample Failed: &quot;+sampleResult.toString()+&quot;\n&quot;+
  &quot;Started at: &quot;+new Date(sampleResult.getStartTime())+&quot;\n&quot;+
  &quot;Finished at: &quot;+new Date(sampleResult.getEndTime())+&quot;\n\n&quot;+
  &quot;Request:\n&quot;+
  sampleResult.getSamplerData()+&quot;\n&quot;+
  &quot;REQUEST DATA\n&quot;+
  &quot;URL: &quot;+
  sampleResult.getUrlAsString()+&quot;\n&quot;+
  &quot;Request headers: \n&quot;+
  sampleResult.getRequestHeaders()+&quot;\n&quot;+
  &quot;Response: \n&quot; +
  sampleResult.getResponseMessage()+&quot;\n&quot;+
  &quot;Response code:&quot; + sampleResult.getResponseCode()+&quot;\n\n&quot;+
  &quot;Response data:\n&quot;+
  sampleResult.getResponseDataAsString()+&quot;\n&quot;;
 return responseLogMessage;
}

/*
 Generate log trace for all failed assertions of sampler
*/
def generateAssertionTrace(AssertionResult[] assertions) {
 def assertionLogMessage = &quot;&quot;;
 
 assertionLogMessage = &quot;Assertion results:\n&quot; +
 &quot;Number of failed assertions: &quot;+assertions.length+&quot;\n&quot;+assertionLogMessage;
 if(assertions.length&gt;0){
  for(int j=0; j&lt;assertions.length; j++){
   assertionLogMessage = assertionLogMessage + assertions[j].getName() + &quot; Failed; \n&quot; + 
   &quot;Failure Message: &quot; + assertions[j].getFailureMessage()+&quot;;\n&quot;
  }
 }
 return assertionLogMessage
}

def postTraceToLog(SampleResult sample, AssertionResult[] assertions) {
 print(generateResponseTrace(sample)+&quot;\n&quot;+generateAssertionTrace(assertions));
 }</stringProp>
        <stringProp name="scriptLanguage">groovy</stringProp>
      </JSR223Listener>
      <hashTree/>
      <kg.apc.jmeter.reporters.ConsoleStatusLogger guiclass="kg.apc.jmeter.reporters.ConsoleStatusLoggerGui" testclass="kg.apc.jmeter.reporters.ConsoleStatusLogger" testname="jp@gc - Console Status Logger" enabled="true"/>
      <hashTree/>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="influxdbMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">http://localhost:8653/write?db=jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">${__P(SCENARIO_NAME, scenario is not specified)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="measurement" elementType="Argument">
              <stringProp name="Argument.name">measurement</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex</stringProp>
              <stringProp name="Argument.value">.*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">90;95;99</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testTitle" elementType="Argument">
              <stringProp name="Argument.name">testTitle</stringProp>
              <stringProp name="Argument.value">Jenkins build #${__P(BUILD_NUMBER, N/A)} ${__P(BUILD_URL, build url N/A)} with ${__P(SCENARIO_NAME, N/A)} with ${__P(USERS, N/A)} users, ${__P(RAMPUP, N/A)} sec rampup and ${__P(DURATION, N/A)} sec duration was</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventTags" elementType="Argument">
              <stringProp name="Argument.name">eventTags</stringProp>
              <stringProp name="Argument.value">scenario ${__P(SCENARIO_NAME, N/A)},${__P(USERS, N/A)} users, ${__P(RAMPUP, N/A)} sec rampup, ${__P(DURATION, N/A)} sec duration,Jenkins build #${__P(BUILD_NUMBER, N/A)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
      </BackendListener>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
